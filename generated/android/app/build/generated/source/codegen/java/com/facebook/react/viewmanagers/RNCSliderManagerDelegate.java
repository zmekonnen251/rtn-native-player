/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.ColorPropConverter;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;

public class RNCSliderManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNCSliderManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public RNCSliderManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "accessibilityUnits":
        mViewManager.setAccessibilityUnits(view, value == null ? null : (String) value);
        break;
      case "accessibilityIncrements":
        mViewManager.setAccessibilityIncrements(view, (ReadableArray) value);
        break;
      case "disabled":
        mViewManager.setDisabled(view, value == null ? false : (boolean) value);
        break;
      case "inverted":
        mViewManager.setInverted(view, value == null ? false : (boolean) value);
        break;
      case "vertical":
        mViewManager.setVertical(view, value == null ? false : (boolean) value);
        break;
      case "tapToSeek":
        mViewManager.setTapToSeek(view, value == null ? false : (boolean) value);
        break;
      case "maximumTrackImage":
        mViewManager.setMaximumTrackImage(view, (ReadableMap) value);
        break;
      case "maximumTrackTintColor":
        mViewManager.setMaximumTrackTintColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "maximumValue":
        mViewManager.setMaximumValue(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "minimumTrackImage":
        mViewManager.setMinimumTrackImage(view, (ReadableMap) value);
        break;
      case "minimumTrackTintColor":
        mViewManager.setMinimumTrackTintColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "minimumValue":
        mViewManager.setMinimumValue(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "step":
        mViewManager.setStep(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "testID":
        mViewManager.setTestID(view, value == null ? null : (String) value);
        break;
      case "thumbImage":
        mViewManager.setThumbImage(view, (ReadableMap) value);
        break;
      case "thumbTintColor":
        mViewManager.setThumbTintColor(view, ColorPropConverter.getColor(value, view.getContext()));
        break;
      case "trackImage":
        mViewManager.setTrackImage(view, (ReadableMap) value);
        break;
      case "value":
        mViewManager.setValue(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "lowerLimit":
        mViewManager.setLowerLimit(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "upperLimit":
        mViewManager.setUpperLimit(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }
}
