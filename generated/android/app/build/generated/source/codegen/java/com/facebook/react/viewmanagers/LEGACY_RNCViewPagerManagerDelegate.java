/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;

public class LEGACY_RNCViewPagerManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & LEGACY_RNCViewPagerManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public LEGACY_RNCViewPagerManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "scrollEnabled":
        mViewManager.setScrollEnabled(view, value == null ? true : (boolean) value);
        break;
      case "layoutDirection":
        mViewManager.setLayoutDirection(view, (String) value);
        break;
      case "initialPage":
        mViewManager.setInitialPage(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "orientation":
        mViewManager.setOrientation(view, (String) value);
        break;
      case "offscreenPageLimit":
        mViewManager.setOffscreenPageLimit(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "pageMargin":
        mViewManager.setPageMargin(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "overScrollMode":
        mViewManager.setOverScrollMode(view, (String) value);
        break;
      case "overdrag":
        mViewManager.setOverdrag(view, value == null ? false : (boolean) value);
        break;
      case "keyboardDismissMode":
        mViewManager.setKeyboardDismissMode(view, (String) value);
        break;
      case "useLegacy":
        mViewManager.setUseLegacy(view, value == null ? true : (boolean) value);
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }

  @Override
  public void receiveCommand(T view, String commandName, @Nullable ReadableArray args) {
    switch (commandName) {
      case "setPage":
        mViewManager.setPage(view, args.getInt(0));
        break;
      case "setPageWithoutAnimation":
        mViewManager.setPageWithoutAnimation(view, args.getInt(0));
        break;
      case "setScrollEnabledImperatively":
        mViewManager.setScrollEnabledImperatively(view, args.getBoolean(0));
        break;
    }
  }
}
