/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;

public class LottieAnimationViewManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & LottieAnimationViewManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public LottieAnimationViewManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "resizeMode":
        mViewManager.setResizeMode(view, value == null ? null : (String) value);
        break;
      case "renderMode":
        mViewManager.setRenderMode(view, value == null ? null : (String) value);
        break;
      case "sourceName":
        mViewManager.setSourceName(view, value == null ? null : (String) value);
        break;
      case "sourceJson":
        mViewManager.setSourceJson(view, value == null ? null : (String) value);
        break;
      case "sourceURL":
        mViewManager.setSourceURL(view, value == null ? null : (String) value);
        break;
      case "sourceDotLottieURI":
        mViewManager.setSourceDotLottieURI(view, value == null ? null : (String) value);
        break;
      case "imageAssetsFolder":
        mViewManager.setImageAssetsFolder(view, value == null ? null : (String) value);
        break;
      case "progress":
        mViewManager.setProgress(view, value == null ? 0f : ((Double) value).floatValue());
        break;
      case "speed":
        mViewManager.setSpeed(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "loop":
        mViewManager.setLoop(view, value == null ? false : (boolean) value);
        break;
      case "autoPlay":
        mViewManager.setAutoPlay(view, value == null ? false : (boolean) value);
        break;
      case "enableMergePathsAndroidForKitKatAndAbove":
        mViewManager.setEnableMergePathsAndroidForKitKatAndAbove(view, value == null ? false : (boolean) value);
        break;
      case "hardwareAccelerationAndroid":
        mViewManager.setHardwareAccelerationAndroid(view, value == null ? false : (boolean) value);
        break;
      case "cacheComposition":
        mViewManager.setCacheComposition(view, value == null ? false : (boolean) value);
        break;
      case "colorFilters":
        mViewManager.setColorFilters(view, (ReadableArray) value);
        break;
      case "dummy":
        mViewManager.setDummy(view, (ReadableMap) value);
        break;
      case "textFiltersAndroid":
        mViewManager.setTextFiltersAndroid(view, (ReadableArray) value);
        break;
      case "textFiltersIOS":
        mViewManager.setTextFiltersIOS(view, (ReadableArray) value);
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }

  @Override
  public void receiveCommand(T view, String commandName, @Nullable ReadableArray args) {
    switch (commandName) {
      case "play":
        mViewManager.play(view, args.getInt(0), args.getInt(1));
        break;
      case "reset":
        mViewManager.reset(view);
        break;
      case "pause":
        mViewManager.pause(view);
        break;
      case "resume":
        mViewManager.resume(view);
        break;
    }
  }
}
